[gd_scene load_steps=3 format=3 uid="uid://j33dyrygurbu"]

[sub_resource type="GDScript" id="GDScript_ge68c"]
script/source = "extends Node

enum QuestFunction {GIVE=1, UPDATE=2, COMPLETE=3}
@export var quest : Quest
@export var type : QuestFunction = QuestFunction.GIVE
var player_quest_tracker : QuestTracker

#When player enters: update quest, destroy self
func _on_body_entered(body):
	if !can_update_quest(body):
		return

	#Call correct function depending on type enum
	match type:
		1: give_quest()
		2: update_quest()
		3: complete_quest()

	queue_free()

func give_quest():
	print(\"Giving Player a quest!\")
	player_quest_tracker.start_new_quest(quest)

func update_quest():
	print(\"Updating a quest\")
	player_quest_tracker.update_quest(quest)
	pass
	
func complete_quest():
	print(\"Completing a quest!\")
	player_quest_tracker.complete_quest(quest)
	pass

func can_update_quest(body):
	#Only player is eligible and quest must be assigned. '!quest' means quest is null
	player_quest_tracker = body.find_child(\"QuestTracker\") as QuestTracker
		
	if !body.is_in_group(\"Player\") || !quest || !player_quest_tracker:
		return false
	else:
		return true
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_n1rge"]
size = Vector2(103, 90)

[node name="QuestUpdate" type="Area2D"]
z_index = 1
script = SubResource("GDScript_ge68c")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, -1)
shape = SubResource("RectangleShape2D_n1rge")

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
